// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    relationMode = "prisma"
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL") // uses connection pooling
    directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Events {
    id String @id @default(cuid())

    adminId String
    admin   User   @relation("AdminEvents", fields: [adminId], references: [id])

    title        String
    description  String?
    thumbnailUrl String?

    datetime            DateTime
    invitedPrivateUsers String[]
    fireReminderEmailAt DateTime?

    Leads Leads[] @relation("EmailLeadsEvents")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([adminId])
}

model Stream {
    id           String  @id @default(uuid())
    name         String  @db.Text
    thumbnailUrl String? @db.Text

    ingressId String? @unique
    serverUrl String? @db.Text
    streamKey String? @db.Text

    isLive              Boolean @default(false)
    isChatEnabled       Boolean @default(true)
    isChatDelayed       Boolean @default(false)
    isChatFollowersOnly Boolean @default(false)

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([ingressId])
}

model Leads {
    email String @id @default(cuid())

    Events   Events[] @relation("EmailLeadsEvents")
    eventsId String?

    @@index([eventsId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    bio           String?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Stream             Stream?
    AdministeredEvents Events[] @relation("AdminEvents")
    eventsId           String?

    following  Follow[] @relation("Following")
    followedBy Follow[] @relation("FollowedBy")
}

model Follow {
    id          String @id @default(uuid())
    followerId  String
    followingId String

    follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
